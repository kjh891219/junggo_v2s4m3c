<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
MEMBER TABLE
1. 회원 가입
  아이디, 닉네임, 이메일 중복 불가능
2. 회원 탈퇴
  탈퇴 시 탈퇴 여부(Y), 로그인 불가(N) 상태가 되고 DB에서는 삭제가 되진 않는다 (관리자만 가능)    
3. 정보 수정
  이메일 변경 여부 확인 후 새로운 이메일이라면 인증을 받아야 로그인이 가능하다
4. 회원 조회
  관리자만 보이도록 할 것
-->


<!-- Oracle 기반 -->
<mapper namespace = "member">

  <select id='checkId' resultType='int' parameterType='String'>
    SELECT COUNT(userid) as cnt
    FROM member
    WHERE userid=#{userid}
  </select>
  
  <!-- 회원가입시 닉네임 중복 확인 -->
  <select id='checkNickname' resultType='int' parameterType='String'>
    SELECT COUNT(userid) as cnt
    FROM member
    WHERE nickname=#{nickname}
  </select>
  
  <!-- 회원가입시 이메일 중복 확인 -->
  <select id='checkEmail' resultType='int' parameterType='String'>
    SELECT COUNT(userid) as cnt
    FROM member
    WHERE email=#{email}
  </select>
  
  <!-- 정보 수정시 닉네임 중복 확인 -->
  <select id='checkNickname_update' resultType='int' parameterType='Map'>
    SELECT COUNT(userid) as cnt
    FROM member
    WHERE nickname=#{nickname} and userid!=#{userid}
  </select>
  
  <!-- 정보 수정시 이메일 중복 확인 -->
  <select id='checkEmail_update' resultType='int' parameterType='Map'>
    SELECT COUNT(userid) as cnt
    FROM member
    WHERE email=#{email} and userid!=#{userid}
  </select>

  <!-- 회원 가입 -->
  <insert id="create" parameterType="MemberVO">
    INSERT INTO member(userid, mno, pwd, name, nickname, email, tel, zipcode, address1, address2, mdate, 
                          auth, confirm, act, dropout)
    VALUES (#{userid}, (SELECT NVL(MAX(mno), 0)+1 as mno FROM member), #{pwd}, #{name}, #{nickname}, #{email}, #{tel}, #{zipcode}, #{address1}, #{address2}, sysdate,
              #{auth}, #{confirm}, #{act}, #{dropout})
  </insert>
  
    <!-- 검색을하지 않는 전체 목록  -->
  <select id="list" resultType="MemberVO">
    SELECT mno, userid, pwd, name, nickname, email, tel, zipcode, address1, address2, mdate, auth, confirm, act, dropout
    FROM member
    ORDER BY mno ASC
  </select>
                          
  <update id="update" parameterType="MemberVO">
    UPDATE member 
    SET pwd=#{pwd}, nickname=#{nickname}, email=#{email}, tel=#{tel}, zipcode=#{zipcode},
          address1=#{address1}, address2=#{address2}, confirm=#{confirm}, act=#{act}
    WHERE mno=#{mno}
  </update> 

  <!-- 조회 -->
  <select id="read" resultType="MemberVO" parameterType="int">
    SELECT userid, mno, pwd, name, nickname, email, tel, zipcode, address1, address2, mdate, 
                          auth, confirm, act, dropout
    FROM member
    WHERE mno=#{mno}
  </select>
   
  <!-- 아이디로 조회 -->
  <select id="read_userid" resultType="MemberVO" parameterType="String">
    SELECT userid, mno, pwd, name, nickname, email, tel, zipcode, address1, address2, mdate, 
                          auth, confirm, act, dropout
    FROM member
    WHERE userid=#{userid}
  </select>
 
  <!-- 탈퇴 신청  --> 
  <update id="dropout" parameterType="MemberVO">
    UPDATE member 
    SET dropout='Y', act='N'
    WHERE userid=#{userid}
  </update> 
  
 <!-- 본인 인증 - 비밀번호 확인  -->
  <select id="checkPwd" resultType="int" parameterType="Map">
    SELECT COUNT(mno) as cnt
    FROM member
    WHERE userid=#{userid} AND pwd=#{pwd}
  </select>

<!--    
  <update id="update_passwd" parameterType="Map"> Map 안에 mno, passwd가 자동으로 대응된다
    UPDATE member
    SET passwd=#{passwd}
    WHERE mno=#{mno}
  </update> -->
 
 
  
  <!-- 관리자 권한 조회 -->
  <select id="admin_search" resultType="int" parameterType="String">
      SELECT COUNT(mno) as cnt
      FROM member
      WHERE act=#{act}
  </select>
  
  <!-- 사용자가 회원 가입 이메일 링크를 눌렀을 경우의 처리 -->
  <update id="confirm" parameterType="MemberVO">
      UPDATE member
      SET confirm = 'Y', act = 'Y'
      WHERE email=#{email} AND auth=#{auth}
  </update>
  
  <!-- 로그인  -->
  <select id="login" resultType="int" parameterType="MemberVO">
      SELECT COUNT(userid) as cnt 
      FROM member 
      WHERE userid=#{userid} AND pwd=#{pwd}
  </select>
  
  <select id="count" resultType="int" parameterType="HashMap" >
    SELECT COUNT(*) as cnt
    FROM member
      <if test = 'dropout == "Y"'> 
         where dropout= 'Y'
      </if>
    <!-- <choose>
      <when test="col == 'title'">
        where title LIKE '%' || #{word} || '%' 
      </when>
      <when test="col == 'content'">
        where content LIKE '%' || #{word} || '%' 
      </when>
      <when test="col == 'category'">
        where category LIKE '%' || #{word} || '%' 
      </when>
      <when test="col == 'title_content'">
        where title LIKE '%' || #{word} || '%'  OR content LIKE '%' || #{word} || '%' 
      </when>      
    </choose> -->
  </select>        
 
  <!-- ********** 검색에 따른 변경 종료 ********** -->  
  
  
  <!-- ********** 페이징에 따른 변경 시작 ********** -->
  <select id="list2" resultType="MemberVO" parameterType="HashMap" >
  SELECT userid, mno, pwd, name, nickname, email, tel, zipcode, address1, address2, mdate, 
                          auth, confirm, act, dropout, r
  from (
      SELECT userid, mno, pwd, name, nickname, email, tel, zipcode, address1, address2, mdate, 
                          auth, confirm, act, dropout, rownum as r
      from (
          SELECT userid, mno, pwd, name, nickname, email, tel, zipcode, address1, address2, mdate, 
                          auth, confirm, act, dropout  
          FROM member
      <if test = 'dropout == "Y"'> 
         where dropout= 'Y'
      </if>
      ORDER BY mno asc
      )
    )
    WHERE <![CDATA[r >=#{startNum} AND r <= #{endNum}]]>
  </select>  
     
  <!-- ********** 페이징에 따른 변경 종료 ********** -->
  
  
  
  
  <!-- ************ 관리자 메뉴 *************** -->
  <!-- 회원 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM member
    WHERE mno=#{mno}
  </delete>  
  
  <!-- 회원 권한 변경 -->
  <update id="act_update" parameterType="Map">
  UPDATE member
  SET act=#{act}
  WHERE mno=#{mno}
  </update> 
  
  
  
  <!-- ********************************************** 마이 페이지 시작 ********************************************************  -->
  <select id="art_list" resultType="ArtVO" parameterType="String" >
  select ano as my_no, deal_code, title, hprice, deal_way, region, wdate, cnt, 
  (select count(ano) from art where userid=#{userid}) as my_cnt
  from art
  WHERE userid=#{userid}
  order by ano desc
  </select>  
  <select id="camera_list" resultType="CameraVO" parameterType="String" >
  select ctno as my_no, deal_code, title, hprice, deal_way, region, wdate, cnt,
  (select count(ctno) from camera where userid=#{userid}) as my_cnt
  from camera
  WHERE userid=#{userid}
  order by ctno desc
  </select>  
  <!-- ********************************************** 마이 페이지 끝   ********************************************************  -->
</mapper>

